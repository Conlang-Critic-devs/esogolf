#[derive(Debug, Clone, PartialEq)]
pub enum Command {
    Value(Val),
    BeginBlock,
    EndBlock,
    EmptyBlock,
    Pack,
    Size,
    Length,
    Dup,
    Not,
    If,
    Define,
    ApplyFunction,
    Read,
    Swap,
    Split,
    Get,
    DupGet,
    Move,
    Grab,
    DupGrab,
    Include,
    Drop,
    Type,
    ToFloat,
    ToInt,
    ToBool,
    Eq,
    Neq,
    GreaterThan,
    GreaterEquals,
    LessThan,
    LessEquals,
    Write,
    Print,
    Exit,
    Or,
    And,
    Xor,
    Add,
    Sub,
    Mul,
    Pow,
    Div,
    Rem,
}

use self::Command::*;
use crate::value::Value as Val;

impl Command {
    pub fn from_str(cmd: &str) -> Self {
        if let Some(cmd) = Self::from_str_pure(cmd) {
            cmd
        } else {
            Value(Val::parse(cmd))
        }
    }
    pub fn from_str_pure(cmd: &str) -> Option<Self> {
        Some(match &*cmd.to_lowercase() {
            "{" | "[" => BeginBlock,
            "}" | "]" => EndBlock,
            "{}" | "[]" => EmptyBlock,
            "inc" | "include" => Include,
            "@" | "pack" => Pack,
            "size" => Size,
            "len" => Length,
            ";" | "dup" => Dup,
            "!" | "not" => Not,
            "?" | "if" => If,
            ":=" | "def" => Define,
            "()" | "apply" => ApplyFunction,
            "<-" | "read" => Read,
            "$" | "swap" => Swap,
            "\\/" | "\\\\/" | "split" => Split,
            "." | "get" => Get,
            ".:" | "dupget" => DupGet,
            "<>" | "move" => Move,
            "#" | "grab" => Grab,
            ":" | "dupgrab" => DupGrab,
            "~" | "drop" => Drop,
            "t" | "type" => Type,
            "f" | "float" => ToFloat,
            "i" | "int" => ToInt,
            "b" | "bool" => ToBool,
            "==" | "=" | "eq" => Eq,
            "!=" | "~=" | "neq" => Neq,
            ">" => GreaterThan,
            ">=" => GreaterEquals,
            "<" => LessThan,
            "<=" => LessEquals,
            "->" | "wrte" => Write,
            "_" | "prnt" => Print,
            "x" | "exit" => Exit,
            "|" | "or" => Or,
            "&" | "and" => And,
            "^" | "xor" => Xor,
            "+" | "add" => Add,
            "-" | "sub" => Sub,
            "*" | "mul" => Mul,
            "**" | "pow" => Pow,
            "/" | "div" => Div,
            "%" | "rem" => Rem,
            _ => return None,
        })
    }
}
